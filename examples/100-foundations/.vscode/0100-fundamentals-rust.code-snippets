{
	"0100-fun-variabl-fn": {
		"prefix": "rs",
		"body": [
			"// Use some crates (we will need them later)",
			"#[allow(unused_imports)]",
			"use rand::Rng;",
			"",
			"fn add(i: i32, j: i32) -> i32 {",
			"    i + j",
			"}",
			"",
			"fn main() {",
			"    $0",
			"}",
			""
		],
		"description": "add function for this example"
	},
	"0105-annotation-inference": {
		"prefix": "rs",
		"body": [
			"let a = 32;",
			"let b: i32 = 64;",
			"let c = add(a, b);",
			"",
			"println!(\"{}\", c);",
			""
		],
		"description": "type inference"
	},
	"0110-shadowing-suffix": {
		"prefix": "rs",
		"body": [
			"let d = 0i32;",
			"let c = a + d;",
			"",
			"println!(\"{}\", c);",
			""
		],
		"description": ""
	},
	"0115-mutability": {
		"prefix": "rs",
		"body": [
			"let mut c = b + d;",
			"c += a;",
			"",
			"println!(\"{}\", c);",
			""
		],
		"description": ""
	},
	"0120-freeze-shadowing": {
		"prefix": "rs",
		"body": [
			"{",
			"    #[allow(unused_variables)]",
			"    let c = c; // shadowing: c is now immutable = frozen",
			"    // c += 4; // <<< Error; c is immutable",
			"}",
			""
		],
		"description": "freeze variable using shadowing"
	},
	"0125-control-flow": {
		"prefix": "rs",
		"body": [
			"let num = rand::thread_rng().gen_range(0..10);",
			"",
			"if num > 5 {",
			"    println!(\"Win!\");",
			"} else if num == 5 {",
			"    println!(\"So close!\");",
			"} else {",
			"    println!(\"Lost :-(\");",
			"}",
			""
		],
		"description": ""
	},
	"0130-controlo-flow-2": {
		"prefix": "rs",
		"body": [
			"",
			"let msg = if num > 5 {",
			"    \"Win!\"",
			"} else if num == 5 {",
			"    \"So close!\"",
			"} else {",
			"    \"Lost :-(\"",
			"};",
			""
		],
		"description": ""
	},
	"0135-match-statement": {
		"prefix": "rs",
		"body": [
			"let msg = match num {",
			"    5 => \"So close\",",
			"    _n if _n < 6 => \"Win!\",",
			"    _ => \"Lost! :-(\",",
			"};",
			"",
			"println!(\"Draw {}, {}\", num, msg);"
		],
		"description": ""
	},
	"0140-final": {
		"prefix": "rs",
		"body": [
			"use rand::Rng;",
			"",
			"fn add(i: i32, j: i32) -> i32 {",
			"    i + j",
			"}",
			"",
			"fn main() {",
			"    let a = 32;",
			"    let b: i32 = 64;",
			"    let c = add(a, b);",
			"",
			"    println!(\"{}\", c);",
			"",
			"    let d = 0i32;",
			"    let c = a + d;",
			"",
			"    println!(\"{}\", c);",
			"",
			"{",
			"    #[allow(unused_variables)]",
			"    let c = c; // shadowing: c is now immutable = frozen",
			"    // c += 4; // <<< Error; c is immutable",
			"}",
			"",
			"    let mut c = b + d;",
			"    c += a;",
			"",
			"    println!(\"{}\", c);",
			"",
			"    let num = rand::thread_rng().gen_range(0..10);",
			"",
			"    let msg = match num {",
			"        5 => \"So close\",",
			"        n if n < 6 => \"Win!\",",
			"        _ => \"Lost! :-(\",",
			"    };",
			"",
			"    println!(\"Draw {}, {}\", num, msg);",
			"}",
			""
		],
		"description": "final app after applying previous snippets"
	},
	"0150-vec": {
		"prefix": "rs",
		"body": [
			"fn main() {",
			"    let mut vecc = vec![1, 2, 3, 4];",
			"",
			"    let mut vecc_collected: Vec<i32> = (1..5).collect();",
			"",
			"    // Turbofish, push, access",
			"    $0",
			"}",
			""
		],
		"description": "21-vec"
	},
	"0155-vec-push": {
		"prefix": "rs",
		"body": [
			"vecc_collected.push(5);",
			"println!(\"{:?}\", vecc_collected);",
			""
		]
	},
	"0160-vec-turbofish": {
		"prefix": "rs",
		"body": [
			"// Turbofish",
			"let mut vecc_collected = (1..5).collect::<Vec<i32>>();",
			"",
			"vecc.push(5);",
			"",
			"vecc_collected.push(6);",
			""
		]
	},
	"0165-vec-loop": {
		"prefix": "rs",
		"body": [
			"for i in vecc_collected {",
			"    println!(\"> {}\", i);",
			"}",
			"",
			"let mut i = 0;",
			"while i < vecc.len() {",
			"    println!(\": {}\", vecc[i]);",
			"    i += 1;",
			"}"
		]
	}
}